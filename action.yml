name: "Setup Python (Non Ubuntu)"
description: "Set up a specific version of Python and add the command-line tools to the PATH on Non Ubuntu Distribution."
author: "ganadist"
inputs:
  python-version:
    description: "Version range or exact version of Python or PyPy to use, using SemVer's version range syntax. Reads from .python-version if unset."
  python-version-file:
    description: "File containing the Python version to use. Example: .python-version"
  cache:
    description: "Used to specify a package manager for caching in the default directory. Supported values: pip, pipenv, poetry."
    required: false
  architecture:
    description: "The target architecture (x86, x64) of the Python or PyPy interpreter."
  check-latest:
    description: "Set this option if you want the action to check for the latest available version that satisfies the version spec."
    default: false
  token:
    description: "The token used to authenticate when fetching Python distributions from https://github.com/actions/python-versions. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting."
    default: ${{ github.server_url == 'https://github.com' && github.token || '' }}
  cache-dependency-path:
    description: "Used to specify the path to dependency files. Supports wildcards or a list of file names for caching multiple dependencies."
  update-environment:
    description: "Set this option if you want the action to update environment variables."
    default: true
  allow-prereleases:
    description: "When 'true', a version range passed to 'python-version' input will match prerelease versions if no GA versions are found. Only 'x.y' version range is supported for CPython."
    default: false
  linux-distribution:
    description: "Not used yet, default is \"Ubuntu\""
    default: Ubuntu
  linux-distribution-version:
    description: "Emulate Linux distribution version"
    default: "18.04"

outputs:
  python-version:
    description: "The installed Python or PyPy version. Useful when given a version range as input."
    value: ${{ steps.setup-python.outputs.python-version }}
  cache-hit:
    description: "A boolean value to indicate a cache entry was found"
    value: ${{ steps.setup-python.outputs.cache-hit }}
  python-path:
    description: "The absolute path to the Python or PyPy executable."
    value: ${{ steps.setup-python.outputs.python-path }}
runs:
  using: "composite"
  steps:
    - name: Create dummy lsb_release command
      id: generate-lsb-release
      shell: bash
      run: |
        LSB_RELEASE_PATH=${{ runner.temp }}/lsb_release
        LSB_RELEASE_SH=${{ runner.temp }}/lsb_release/lsb_release
        rm -rf "${LSB_RELEASE_PATH}"
        mkdir -p "${LSB_RELEASE_PATH}"
        echo "#!/bin/bash" >> "${LSB_RELEASE_SH}"
        echo echo ${{ inputs.linux-distribution }} >> "${LSB_RELEASE_SH}"
        echo echo ${{ inputs.linux-distribution-version }} >> "${LSB_RELEASE_SH}"
        chmod +x "${LSB_RELEASE_SH}"
        echo "${LSB_RELEASE_PATH}:${PATH}" >> $GITHUB_PATH
        echo "lsb_release_path=${LSB_RELEASE_PATH}" >> $GITHUB_OUTPUT
        cat "${LSB_RELEASE_PATH}"/lsb_release
        "${LSB_RELEASE_PATH}"/lsb_release
    - name: Check env
      shell: bash
      run: |
        echo ${PATH}
        echo ${{ steps.generate-lsb-release.outputs.lsb_release_path }}
        echo cat ${{ steps.generate-lsb-release.outputs.lsb_release_path }}/lsb_release

    - uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: ${{ inputs.python-version }}
        python-version-file: ${{ inputs.python-version-file }}
        cache: ${{ inputs.cache }}
        architecture: ${{ inputs.architecture }}
        check-latest: ${{ inputs.check-latest }}
        cache-dependency-path: ${{ inputs.cache-dependency-path }}
        update-environment: ${{ inputs.update-environment }}
        allow-prereleases: ${{ inputs.allow-prereleases }}

